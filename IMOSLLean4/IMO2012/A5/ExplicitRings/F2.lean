/-
Copyright (c) 2023 Gian Cordana Sanjaya. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Gian Cordana Sanjaya
-/

import Mathlib.Algebra.Group.Hom.Basic
import Mathlib.Algebra.Ring.Hom.Defs

/-!
# Explicit construction of ùîΩ‚ÇÇ

In this file, we explicitly construct the field of 2 elements.
We prove just the necessary properties for the purpose of the main problem.
-/

namespace IMOSL
namespace IMO2012A5

inductive ùîΩ‚ÇÇ
  | O : ùîΩ‚ÇÇ
  | I : ùîΩ‚ÇÇ



namespace ùîΩ‚ÇÇ

protected def add : ùîΩ‚ÇÇ ‚Üí ùîΩ‚ÇÇ ‚Üí ùîΩ‚ÇÇ
  | O, x => x
  | I, O => I
  | I, I => O

protected def mul : ùîΩ‚ÇÇ ‚Üí ùîΩ‚ÇÇ ‚Üí ùîΩ‚ÇÇ
  | O, _ => O
  | I, x => x

instance : Zero ùîΩ‚ÇÇ := ‚ü®O‚ü©
instance : One ùîΩ‚ÇÇ := ‚ü®I‚ü©
instance : Add ùîΩ‚ÇÇ := ‚ü®ùîΩ‚ÇÇ.add‚ü©
instance : Neg ùîΩ‚ÇÇ := ‚ü®id‚ü©
instance : Mul ùîΩ‚ÇÇ := ‚ü®ùîΩ‚ÇÇ.mul‚ü©



protected theorem zero_add (x : ùîΩ‚ÇÇ) : 0 + x = x := rfl

protected theorem add_zero : ‚àÄ x : ùîΩ‚ÇÇ, x + 0 = x
  | O => rfl
  | I => rfl

protected theorem add_comm : ‚àÄ x y : ùîΩ‚ÇÇ, x + y = y + x
  | O, x => x.add_zero.symm
  | I, O => rfl
  | I, I => rfl

protected theorem add_assoc : ‚àÄ x y z : ùîΩ‚ÇÇ, x + y + z = x + (y + z)
  | O, _, _ => rfl
  | I, O, _ => rfl
  | I, I, O => rfl
  | I, I, I => rfl

protected theorem add_left_neg : ‚àÄ x : ùîΩ‚ÇÇ, -x + x = 0
  | O => rfl
  | I => rfl

protected theorem zero_mul (x : ùîΩ‚ÇÇ) : 0 * x = 0 := rfl

protected theorem mul_zero : ‚àÄ x : ùîΩ‚ÇÇ, x * 0 = 0
  | O => rfl
  | I => rfl

protected theorem one_mul (x : ùîΩ‚ÇÇ) : 1 * x = x := rfl

protected theorem mul_one : ‚àÄ x : ùîΩ‚ÇÇ, x * 1 = x
  | O => rfl
  | I => rfl

protected theorem mul_comm : ‚àÄ x y : ùîΩ‚ÇÇ, x * y = y * x
  | I, x => x.mul_one.symm
  | O, O => rfl
  | O, I => rfl

protected theorem mul_assoc : ‚àÄ x y z : ùîΩ‚ÇÇ, x * y * z = x * (y * z)
  | O, _, _ => rfl
  | I, _, _ => rfl

protected theorem mul_add : ‚àÄ x y z : ùîΩ‚ÇÇ, x * (y + z) = x * y + x * z
  | O, _, _ => rfl
  | I, _, _ => rfl

protected theorem add_mul : ‚àÄ x y z : ùîΩ‚ÇÇ, (x + y) * z = x * z + y * z
  | O, _, _ => rfl
  | I, O, z => z.add_zero.symm
  | I, I, O => rfl
  | I, I, I => rfl

instance : CommRing ùîΩ‚ÇÇ :=
  { add_assoc := ùîΩ‚ÇÇ.add_assoc
    zero_add := ùîΩ‚ÇÇ.zero_add
    add_zero := ùîΩ‚ÇÇ.add_zero
    add_comm := ùîΩ‚ÇÇ.add_comm
    zero_mul := ùîΩ‚ÇÇ.zero_mul
    mul_zero := ùîΩ‚ÇÇ.mul_zero
    mul_assoc := ùîΩ‚ÇÇ.mul_assoc
    one_mul := ùîΩ‚ÇÇ.one_mul
    mul_one := ùîΩ‚ÇÇ.mul_one
    add_left_neg := ùîΩ‚ÇÇ.add_left_neg
    mul_comm := ùîΩ‚ÇÇ.mul_comm
    left_distrib := ùîΩ‚ÇÇ.mul_add
    right_distrib := ùîΩ‚ÇÇ.add_mul
    nsmul := nsmulRec
    zsmul := zsmulRec }





/-! ## Homomorphism from `ùîΩ‚ÇÇ` -/

def cast [AddGroupWithOne R] : ùîΩ‚ÇÇ ‚Üí R
  | O => 0
  | I => 1


variable [Ring R]

theorem cast_eq_zero_imp (h : (1 : R) ‚â† 0) :
    ‚àÄ x : ùîΩ‚ÇÇ, cast (R := R) x = 0 ‚Üí x = 0
  | O => Œª _ ‚Ü¶ rfl
  | I => Œª h0 ‚Ü¶ absurd h0 h

theorem cast_mul : ‚àÄ x y : ùîΩ‚ÇÇ, cast (R := R) (x * y) = cast x * cast y
  | O, _ => (zero_mul _).symm
  | I, _ => (one_mul _).symm

variable (h : (2 : R) = 0)

theorem cast_add : ‚àÄ x y : ùîΩ‚ÇÇ, cast (R := R) (x + y) = cast x + cast y
  | O, _ => (zero_add _).symm
  | I, O => (add_zero 1).symm
  | I, I => (one_add_one_eq_two.trans h).symm

def castHom : ùîΩ‚ÇÇ ‚Üí+* R :=
  { toFun := cast
    map_one' := rfl
    map_mul' := cast_mul
    map_zero' := rfl
    map_add' := cast_add h }

theorem castHom_injective (h0 : (1 : R) ‚â† 0) : Function.Injective (castHom h) :=
  (injective_iff_map_eq_zero (castHom h)).mpr (cast_eq_zero_imp h0)
